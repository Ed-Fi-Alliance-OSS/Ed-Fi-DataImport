
{
  "apiVersion": "2.0",
  "swaggerVersion": "1.2",
  "basePath": "http://test-ods-v2.5.0.1.example.com/api/v2.0/2019",
  "resourcePath": "/assessmentFamilies",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/assessmentFamilies",
      "description": "This entity represents a logical grouping or association of assessments that share a common purpose, heritage or content standard. There may be hierarchiesof assessment families, characteristics (e.g., Academic Subject) specified for assessment families, by convention, are inherited by the Assessments associated with the AssessmentFamily.",
      "operations": [
        {
          "method": "GET",
          "nickname": "getAssessmentFamiliesAll",
          "type": "array",
          "items": {
            "$ref": "assessmentFamily"
          },
          "parameters": [
            {
              "paramType": "query",
              "name": "offset",
              "description": "Indicates how many items should be skipped before returning results.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "limit",
              "description": "Indicates the maximum number of items that should be returned in the results (defaults to 25).",
              "type": "integer",
              "required": false,
              "minimum": 1,
              "maximum": 250
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get All\" pattern. In this version of the API there is support for paging.",
          "responseMessages": [
            {
              "code": 200,
              "message": "The matching resource(s) were successfully retrieved.  If no instances are found will return an empty collection.",
              "responseModel": "array",
              "items": {
                "$ref": "assessmentFamily"
              }
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors.  This will typically be an issue with the query parameters or their values."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "GET",
          "nickname": "getAssessmentFamiliesByExample",
          "type": "array",
          "items": {
            "$ref": "assessmentFamily"
          },
          "parameters": [
            {
              "paramType": "query",
              "name": "offset",
              "description": "Indicates how many items should be skipped before returning results.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "limit",
              "description": "Indicates the maximum number of items that should be returned in the results (defaults to 25).",
              "type": "integer",
              "required": false,
              "minimum": 1,
              "maximum": 250
            },
            {
              "paramType": "query",
              "name": "title",
              "description": "The title or name of the AssessmentFamily.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "parentAssessmentFamilyTitle",
              "description": "The title or name of the AssessmentFamily.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "academicSubjectDescriptor",
              "description": "The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment family.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "assessmentCategoryDescriptor",
              "description": "The category of an assessment based on format and content. For example: Achievement test, Advanced placement test, Alternate assessment/grade-level standards, Attitudinal test, Cognitive, and perceptual skills test, etc.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "assessedGradeLevelDescriptor",
              "description": "The typical grade level for which an assessment family is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example: Adult, Prekindergarten, First grade, Second grade, etc.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "lowestAssessedGradeLevelDescriptor",
              "description": "If the assessment spans a range of grades, then this attribute holds the lowest grade assessed. If only one grade level is assessed, then this attribute is omitted.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "version",
              "description": "The version identifier for the AssessmentFamily.",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "revisionDate",
              "description": "The month, day, and year that the conceptual design for the AssessmentFamily was most recently revised substantially.",
              "type": "string",
              "format": "date",
              "required": false
            },
            {
              "paramType": "query",
              "name": "nomenclature",
              "description": "Reflects the specific nomenclature used for this level of AssessmentFamily.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "namespace",
              "description": "Namespace for the Assessments in this AssessmentFamily.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "id",
              "description": "",
              "type": "string",
              "format": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves resources matching values of an example resource (using the \"Get By Example\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get by Example\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource(s) were successfully retrieved.  If no instances are found will return an empty collection.",
              "responseModel": "array",
              "items": {
                "$ref": "assessmentFamily"
              }
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors.  This will typically be an issue with the query parameters or their values."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "GET",
          "nickname": "getAssessmentFamilyByKey",
          "type": "assessmentFamily",
          "parameters": [
            {
              "paramType": "query",
              "name": "title",
              "description": "The title or name of the AssessmentFamily.",
              "type": "string",
              "format": "",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
              "type": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves a specific resource using the values of the resource's natural key (using the \"Get By Key\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get by Key\" search pattern. The values of the natural key of the resource must be fully specified, and the service will return the matching result (if it exists).",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource was successfully retrieved.",
              "responseModel": "assessmentFamily"
            },
            {
              "code": 304,
              "message": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "POST",
          "nickname": "postAssessmentFamilies",
          "type": "void",
          "parameters": [
            {
              "paramType": "body",
              "name": "assessmentFamily",
              "description": "The JSON representation of the \"assessmentFamily\" resource to be created or updated.",
              "type": "assessmentFamily",
              "required": true
            }
          ],
          "consumes": [
            "application/json"
          ],
          "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
          "notes": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update).  Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
          "responseMessages": [
            {
              "code": 201,
              "message": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
            },
            {
              "code": 202,
              "message": "The resource has been validated and accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        }
      ]
    },
    {
      "path": "/assessmentFamilies/{id}",
      "description": "This entity represents a logical grouping or association of assessments that share a common purpose, heritage or content standard. There may be hierarchiesof assessment families, characteristics (e.g., Academic Subject) specified for assessment families, by convention, are inherited by the Assessments associated with the AssessmentFamily.",
      "operations": [
        {
          "method": "GET",
          "nickname": "getAssessmentFamiliesById",
          "type": "assessmentFamily",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be retrieved.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
              "type": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
          "notes": "This GET operation retrieves a resource by the specified resource identifier.",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource was successfully retrieved.",
              "responseModel": "assessmentFamily"
            },
            {
              "code": 304,
              "message": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "PUT",
          "nickname": "putAssessmentFamily",
          "type": "void",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be updated.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "body",
              "name": "assessmentFamily",
              "description": "The JSON representation of the \"assessmentFamily\" resource to be updated.",
              "type": "assessmentFamily",
              "required": true
            }
          ],
          "consumes": [
            "application/json"
          ],
          "summary": "Updates or creates a resource based on the resource identifier.",
          "notes": "The PUT operation is used to update or create a resource by identifier.  If the resource doesn't exist, the resource will be created using that identifier.  Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
          "responseMessages": [
            {
              "code": 201,
              "message": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
            },
            {
              "code": 202,
              "message": "The resource has been validated and accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "DELETE",
          "nickname": "deleteAssessmentFamilyById",
          "type": "void",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be deleted.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
              "type": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "summary": "Deletes an existing resource using the resource identifier.",
          "notes": "The DELETE operation is used to delete an existing resource by identifier.  If the resource doesn't exist, an error will result (the resource will not be found).",
          "responseMessages": [
            {
              "code": 202,
              "message": "The request has accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was successfully deleted."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        }
      ]
    }
  ],
  "models": {
    "assessmentFamily": {
      "id": "assessmentFamily",
      "properties": {
        "id": {
          "type": "string",
          "required": true,
          "description": "The unique identifier of the resource."
        },
        "parentAssessmentFamilyReference": {
          "type": "assessmentFamilyReference",
          "required": false,
          "description": "A reference to the related AssessmentFamily resource."
        },
        "academicSubjectDescriptor": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment family."
        },
        "assessedGradeLevelDescriptor": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The typical grade level for which an assessment family is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example: Adult, Prekindergarten, First grade, Second grade, etc."
        },
        "assessmentCategoryDescriptor": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The category of an assessment based on format and content. For example: Achievement test, Advanced placement test, Alternate assessment/grade-level standards, Attitudinal test, Cognitive, and perceptual skills test, etc."
        },
        "title": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The title or name of the AssessmentFamily."
        },
        "lowestAssessedGradeLevelDescriptor": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "If the assessment spans a range of grades, then this attribute holds the lowest grade assessed. If only one grade level is assessed, then this attribute is omitted."
        },
        "namespace": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "Namespace for the Assessments in this AssessmentFamily."
        },
        "nomenclature": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "Reflects the specific nomenclature used for this level of AssessmentFamily."
        },
        "revisionDate": {
          "type": "string",
          "format": "date",
          "required": false,
          "description": "The month, day, and year that the conceptual design for the AssessmentFamily was most recently revised substantially."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "required": false,
          "description": "The version identifier for the AssessmentFamily."
        },
        "contentStandard": {
          "type": "assessmentFamilyContentStandard",
          "required": false,
          "description": "An indication as to whether an assessment conforms to a standard (e.g., local standard, statewide standard, regional standard, association standard)."
        },
        "assessmentPeriods": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of assessmentFamilyAssessmentPeriods.  The periods or windows defined in which an assessment is supposed to be administered.",
          "items": {
            "$ref": "assessmentFamilyAssessmentPeriod"
          }
        },
        "identificationCodes": {
          "type": "array",
          "required": true,
          "description": "An unordered collection of assessmentFamilyIdentificationCodes.  A unique number or alphanumeric code assigned to an assessment family by a school, school system, a state, or other agency or entity.",
          "items": {
            "$ref": "assessmentFamilyIdentificationCode"
          }
        },
        "languages": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of assessmentFamilyLanguages.  An indication of the languages in which the AssessmentFamily is designed.",
          "items": {
            "$ref": "assessmentFamilyLanguage"
          }
        },
        "_etag": {
          "type": "string",
          "required": false,
          "description": "A unique system-generated value that identifies the version of the resource."
        }
      }
    },
    "assessmentFamilyReference": {
      "id": "assessmentFamilyReference",
      "properties": {
        "title": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The title or name of the AssessmentFamily."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related assessmentFamily resource."
        }
      }
    },
    "assessmentFamilyAssessmentPeriod": {
      "id": "assessmentFamilyAssessmentPeriod",
      "properties": {
        "assessmentPeriodDescriptor": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The periods or windows defined in which an assessment is supposed to be administered."
        }
      }
    },
    "assessmentFamilyIdentificationCode": {
      "id": "assessmentFamilyIdentificationCode",
      "properties": {
        "assessmentIdentificationSystemDescriptor": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment."
        },
        "identificationCode": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity."
        },
        "assigningOrganizationIdentificationCode": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The organization code or name assigning the assessment identification code."
        }
      }
    },
    "assessmentFamilyLanguage": {
      "id": "assessmentFamilyLanguage",
      "properties": {
        "languageDescriptor": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "An indication of the languages in which the AssessmentFamily is designed."
        }
      }
    },
    "assessmentFamilyContentStandard": {
      "id": "assessmentFamilyContentStandard",
      "properties": {
        "mandatingEducationOrganizationReference": {
          "type": "educationOrganizationReference",
          "required": false,
          "description": "A reference to the related EducationOrganization resource."
        },
        "publicationStatusType": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown)."
        },
        "title": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The name of the content standard, for example Common Core."
        },
        "version": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The version identifier for the content."
        },
        "uri": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "An unambiguous reference to the standards using a network-resolvable URI."
        },
        "publicationDate": {
          "type": "string",
          "format": "date",
          "required": false,
          "description": "The date on which this content was first published."
        },
        "publicationYear": {
          "type": "integer",
          "format": "int32",
          "required": false,
          "description": "The year at which this content was first published."
        },
        "beginDate": {
          "type": "string",
          "format": "date",
          "required": false,
          "description": "The beginning of the period during which this learning standard document is intended for use."
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "required": false,
          "description": "The end of the period during which this learning standard document is intended for use."
        },
        "authors": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of assessmentFamilyContentStandardAuthors.  The person or organization chiefly responsible for the intellectual content of the standard.",
          "items": {
            "$ref": "assessmentFamilyContentStandardAuthor"
          }
        }
      }
    },
    "assessmentFamilyContentStandardAuthor": {
      "id": "assessmentFamilyContentStandardAuthor",
      "properties": {
        "author": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The person or organization chiefly responsible for the intellectual content of the standard."
        }
      }
    },
    "educationOrganizationReference": {
      "id": "educationOrganizationReference",
      "properties": {
        "educationOrganizationId": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related educationOrganization resource."
        }
      }
    },
    "webServiceError": {
      "id": "webServiceError",
      "properties": {
        "message": {
          "type": "string",
          "required": false,
          "description": "The \"user-friendly\" error message."
        },
        "exceptionMessage": {
          "type": "string",
          "required": false,
          "description": "The system-generated exception message."
        },
        "exceptionType": {
          "type": "string",
          "required": false,
          "description": "The type of the exception."
        },
        "stackTrace": {
          "type": "string",
          "required": false,
          "description": "The server-side stack trace (only available in DEBUG builds)."
        }
      }
    },
    "link": {
      "id": "link",
      "properties": {
        "rel": {
          "type": "string",
          "required": false,
          "description": "Describes the nature of the relationship to the referenced resource."
        },
        "href": {
          "type": "string",
          "required": false,
          "description": "The URL to the related resource."
        }
      }
    }
  }
}
