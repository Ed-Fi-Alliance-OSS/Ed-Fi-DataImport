
{
  "apiVersion": "2.0",
  "swaggerVersion": "1.2",
  "basePath": "http://test-ods-v2.5.0.1.example.com/api/v2.0/2019",
  "resourcePath": "/studentSchoolAssociations",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/studentSchoolAssociations",
      "description": "This association represents the School in which a student is enrolled. The semantics of enrollment may differ slightly by state. Non-enrollment relationships between a student and an education organization may be described using the StudentEducationOrganizationAssociation.",
      "operations": [
        {
          "method": "GET",
          "nickname": "getStudentSchoolAssociationsAll",
          "type": "array",
          "items": {
            "$ref": "studentSchoolAssociation"
          },
          "parameters": [
            {
              "paramType": "query",
              "name": "offset",
              "description": "Indicates how many items should be skipped before returning results.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "limit",
              "description": "Indicates the maximum number of items that should be returned in the results (defaults to 25).",
              "type": "integer",
              "required": false,
              "minimum": 1,
              "maximum": 250
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get All\" pattern. In this version of the API there is support for paging.",
          "responseMessages": [
            {
              "code": 200,
              "message": "The matching resource(s) were successfully retrieved.  If no instances are found will return an empty collection.",
              "responseModel": "array",
              "items": {
                "$ref": "studentSchoolAssociation"
              }
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors.  This will typically be an issue with the query parameters or their values."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "GET",
          "nickname": "getStudentSchoolAssociationsByExample",
          "type": "array",
          "items": {
            "$ref": "studentSchoolAssociation"
          },
          "parameters": [
            {
              "paramType": "query",
              "name": "offset",
              "description": "Indicates how many items should be skipped before returning results.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "limit",
              "description": "Indicates the maximum number of items that should be returned in the results (defaults to 25).",
              "type": "integer",
              "required": false,
              "minimum": 1,
              "maximum": 250
            },
            {
              "paramType": "query",
              "name": "entryDate",
              "description": "The month, day, and year on which an individual enters and begins to receive instructional services in a school.",
              "type": "string",
              "format": "date",
              "required": false
            },
            {
              "paramType": "query",
              "name": "schoolId",
              "description": "The identifier assigned to a school by the State Education Agency (SEA).",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "studentUniqueId",
              "description": "A unique alphanumeric code assigned to a student.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "graduationPlanTypeDescriptor",
              "description": "The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "educationOrganizationId",
              "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "graduationSchoolYear",
              "description": "The school year the student is expected to graduate.",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "schoolYear",
              "description": "The school year associated with the student's enrollment.",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "classOfSchoolYear",
              "description": "Projected High School graduation year.",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "entryGradeLevelReasonType",
              "description": "The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "entryTypeDescriptor",
              "description": "The process by which a student enters a school during a given academic session.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "exitWithdrawTypeDescriptor",
              "description": "The circumstances under which the student exited from membership in an educational institution.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "entryGradeLevelDescriptor",
              "description": "The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "residencyStatusDescriptor",
              "description": "An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "primarySchool",
              "description": "Indicates if a given enrollment record should be considered the primary record for a student. If omitted, the default is true.",
              "type": "boolean",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "repeatGradeIndicator",
              "description": "An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.",
              "type": "boolean",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "schoolChoiceTransfer",
              "description": "An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.",
              "type": "boolean",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "exitWithdrawDate",
              "description": "The month, day, and year of the first day after the date of an individual's last attendance at a school (if known), the day on which an individual graduated, or the date on which it becomes known officially that an individual left school.",
              "type": "string",
              "format": "date",
              "required": false
            },
            {
              "paramType": "query",
              "name": "employedWhileEnrolled",
              "description": "An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.",
              "type": "boolean",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "id",
              "description": "",
              "type": "string",
              "format": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves resources matching values of an example resource (using the \"Get By Example\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get by Example\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource(s) were successfully retrieved.  If no instances are found will return an empty collection.",
              "responseModel": "array",
              "items": {
                "$ref": "studentSchoolAssociation"
              }
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors.  This will typically be an issue with the query parameters or their values."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "GET",
          "nickname": "getStudentSchoolAssociationByKey",
          "type": "studentSchoolAssociation",
          "parameters": [
            {
              "paramType": "query",
              "name": "entryDate",
              "description": "The month, day, and year on which an individual enters and begins to receive instructional services in a school.",
              "type": "string",
              "format": "date",
              "required": true
            },
            {
              "paramType": "query",
              "name": "schoolId",
              "description": "The identifier assigned to a school by the State Education Agency (SEA).",
              "type": "integer",
              "format": "int32",
              "required": true
            },
            {
              "paramType": "query",
              "name": "studentUniqueId",
              "description": "A unique alphanumeric code assigned to a student.",
              "type": "string",
              "format": "",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
              "type": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves a specific resource using the values of the resource's natural key (using the \"Get By Key\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get by Key\" search pattern. The values of the natural key of the resource must be fully specified, and the service will return the matching result (if it exists).",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource was successfully retrieved.",
              "responseModel": "studentSchoolAssociation"
            },
            {
              "code": 304,
              "message": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "POST",
          "nickname": "postStudentSchoolAssociations",
          "type": "void",
          "parameters": [
            {
              "paramType": "body",
              "name": "studentSchoolAssociation",
              "description": "The JSON representation of the \"studentSchoolAssociation\" resource to be created or updated.",
              "type": "studentSchoolAssociation",
              "required": true
            }
          ],
          "consumes": [
            "application/json"
          ],
          "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
          "notes": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update).  Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
          "responseMessages": [
            {
              "code": 201,
              "message": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
            },
            {
              "code": 202,
              "message": "The resource has been validated and accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        }
      ]
    },
    {
      "path": "/studentSchoolAssociations/{id}",
      "description": "This association represents the School in which a student is enrolled. The semantics of enrollment may differ slightly by state. Non-enrollment relationships between a student and an education organization may be described using the StudentEducationOrganizationAssociation.",
      "operations": [
        {
          "method": "GET",
          "nickname": "getStudentSchoolAssociationsById",
          "type": "studentSchoolAssociation",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be retrieved.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
              "type": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
          "notes": "This GET operation retrieves a resource by the specified resource identifier.",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource was successfully retrieved.",
              "responseModel": "studentSchoolAssociation"
            },
            {
              "code": 304,
              "message": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "PUT",
          "nickname": "putStudentSchoolAssociation",
          "type": "void",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be updated.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "body",
              "name": "studentSchoolAssociation",
              "description": "The JSON representation of the \"studentSchoolAssociation\" resource to be updated.",
              "type": "studentSchoolAssociation",
              "required": true
            }
          ],
          "consumes": [
            "application/json"
          ],
          "summary": "Updates or creates a resource based on the resource identifier.",
          "notes": "The PUT operation is used to update or create a resource by identifier.  If the resource doesn't exist, the resource will be created using that identifier.  Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
          "responseMessages": [
            {
              "code": 201,
              "message": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
            },
            {
              "code": 202,
              "message": "The resource has been validated and accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "DELETE",
          "nickname": "deleteStudentSchoolAssociationById",
          "type": "void",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be deleted.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
              "type": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "summary": "Deletes an existing resource using the resource identifier.",
          "notes": "The DELETE operation is used to delete an existing resource by identifier.  If the resource doesn't exist, an error will result (the resource will not be found).",
          "responseMessages": [
            {
              "code": 202,
              "message": "The request has accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was successfully deleted."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        }
      ]
    }
  ],
  "models": {
    "studentSchoolAssociation": {
      "id": "studentSchoolAssociation",
      "properties": {
        "id": {
          "type": "string",
          "required": true,
          "description": "The unique identifier of the resource."
        },
        "graduationPlanReference": {
          "type": "graduationPlanReference",
          "required": false,
          "description": "A reference to the related GraduationPlan resource."
        },
        "schoolReference": {
          "type": "schoolReference",
          "required": true,
          "description": "A reference to the related School resource."
        },
        "schoolYearTypeReference": {
          "type": "schoolYearTypeReference",
          "required": false,
          "description": "A reference to the related SchoolYearType resource."
        },
        "classOfSchoolYearTypeReference": {
          "type": "schoolYearTypeReference",
          "required": false,
          "description": "A reference to the related SchoolYearType resource."
        },
        "studentReference": {
          "type": "studentReference",
          "required": true,
          "description": "A reference to the related Student resource."
        },
        "employedWhileEnrolled": {
          "type": "boolean",
          "format": "",
          "required": false,
          "description": "An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education."
        },
        "entryDate": {
          "type": "string",
          "format": "date",
          "required": true,
          "description": "The month, day, and year on which an individual enters and begins to receive instructional services in a school."
        },
        "entryGradeLevelDescriptor": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session."
        },
        "entryGradeLevelReasonType": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term."
        },
        "entryTypeDescriptor": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The process by which a student enters a school during a given academic session."
        },
        "exitWithdrawDate": {
          "type": "string",
          "format": "date",
          "required": false,
          "description": "The month, day, and year of the first day after the date of an individual's last attendance at a school (if known), the day on which an individual graduated, or the date on which it becomes known officially that an individual left school."
        },
        "exitWithdrawTypeDescriptor": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The circumstances under which the student exited from membership in an educational institution."
        },
        "primarySchool": {
          "type": "boolean",
          "format": "",
          "required": false,
          "description": "Indicates if a given enrollment record should be considered the primary record for a student. If omitted, the default is true."
        },
        "repeatGradeIndicator": {
          "type": "boolean",
          "format": "",
          "required": false,
          "description": "An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back."
        },
        "residencyStatusDescriptor": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit."
        },
        "schoolChoiceTransfer": {
          "type": "boolean",
          "format": "",
          "required": false,
          "description": "An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116."
        },
        "educationPlans": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of studentSchoolAssociationEducationPlans.  The type of EducationPlan(s) the student is following, if appropriate. For example:          Special education IEP          Vocational.",
          "items": {
            "$ref": "studentSchoolAssociationEducationPlan"
          }
        },
        "_etag": {
          "type": "string",
          "required": false,
          "description": "A unique system-generated value that identifies the version of the resource."
        }
      }
    },
    "graduationPlanReference": {
      "id": "graduationPlanReference",
      "properties": {
        "typeDescriptor": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard."
        },
        "educationOrganizationId": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID."
        },
        "graduationSchoolYear": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The school year the student is expected to graduate."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related graduationPlan resource."
        }
      }
    },
    "schoolReference": {
      "id": "schoolReference",
      "properties": {
        "schoolId": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier assigned to a school by the State Education Agency (SEA)."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related school resource."
        }
      }
    },
    "schoolYearTypeReference": {
      "id": "schoolYearTypeReference",
      "properties": {
        "schoolYear": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "Key for School Year"
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related schoolYearType resource."
        }
      }
    },
    "studentReference": {
      "id": "studentReference",
      "properties": {
        "studentUniqueId": {
          "type": "string",
          "format": "int32",
          "required": true,
          "description": "A unique alphanumeric code assigned to a student."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related student resource."
        }
      }
    },
    "studentSchoolAssociationEducationPlan": {
      "id": "studentSchoolAssociationEducationPlan",
      "properties": {
        "educationPlanType": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The type of EducationPlan(s) the student is following, if appropriate. For example:          Special education IEP          Vocational."
        }
      }
    },
    "webServiceError": {
      "id": "webServiceError",
      "properties": {
        "message": {
          "type": "string",
          "required": false,
          "description": "The \"user-friendly\" error message."
        },
        "exceptionMessage": {
          "type": "string",
          "required": false,
          "description": "The system-generated exception message."
        },
        "exceptionType": {
          "type": "string",
          "required": false,
          "description": "The type of the exception."
        },
        "stackTrace": {
          "type": "string",
          "required": false,
          "description": "The server-side stack trace (only available in DEBUG builds)."
        }
      }
    },
    "link": {
      "id": "link",
      "properties": {
        "rel": {
          "type": "string",
          "required": false,
          "description": "Describes the nature of the relationship to the referenced resource."
        },
        "href": {
          "type": "string",
          "required": false,
          "description": "The URL to the related resource."
        }
      }
    }
  }
}
