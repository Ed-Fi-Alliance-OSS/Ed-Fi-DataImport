
{
  "apiVersion": "2.0",
  "swaggerVersion": "1.2",
  "basePath": "http://test-ods-v2.5.0.1.example.com/api/v2.0/2019",
  "resourcePath": "/reportCards",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/reportCards",
      "description": "This educational entity represents the collection of student grades for courses taken during a grading period.",
      "operations": [
        {
          "method": "GET",
          "nickname": "getReportCardsAll",
          "type": "array",
          "items": {
            "$ref": "reportCard"
          },
          "parameters": [
            {
              "paramType": "query",
              "name": "offset",
              "description": "Indicates how many items should be skipped before returning results.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "limit",
              "description": "Indicates the maximum number of items that should be returned in the results (defaults to 25).",
              "type": "integer",
              "required": false,
              "minimum": 1,
              "maximum": 250
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get All\" pattern. In this version of the API there is support for paging.",
          "responseMessages": [
            {
              "code": 200,
              "message": "The matching resource(s) were successfully retrieved.  If no instances are found will return an empty collection.",
              "responseModel": "array",
              "items": {
                "$ref": "reportCard"
              }
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors.  This will typically be an issue with the query parameters or their values."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "GET",
          "nickname": "getReportCardsByExample",
          "type": "array",
          "items": {
            "$ref": "reportCard"
          },
          "parameters": [
            {
              "paramType": "query",
              "name": "offset",
              "description": "Indicates how many items should be skipped before returning results.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "limit",
              "description": "Indicates the maximum number of items that should be returned in the results (defaults to 25).",
              "type": "integer",
              "required": false,
              "minimum": 1,
              "maximum": 250
            },
            {
              "paramType": "query",
              "name": "educationOrganizationId",
              "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "gradingPeriodDescriptor",
              "description": "The name of the period for which grades are reported.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "schoolId",
              "description": "The identifier assigned to a school by the State Education Agency (SEA).",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "gradingPeriodBeginDate",
              "description": "Month, day, and year of the first day of the GradingPeriod.",
              "type": "string",
              "format": "date",
              "required": false
            },
            {
              "paramType": "query",
              "name": "studentUniqueId",
              "description": "A unique alphanumeric code assigned to a student.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "gpaGivenGradingPeriod",
              "description": "A measure of average performance in all courses taken by an individual for the current grading period.",
              "type": "number",
              "format": "double",
              "required": false
            },
            {
              "paramType": "query",
              "name": "gpaCumulative",
              "description": "A measure of cumulative average performance in all courses taken by an individual from the beginning of the school year through the current grading period.",
              "type": "number",
              "format": "double",
              "required": false
            },
            {
              "paramType": "query",
              "name": "numberOfDaysAbsent",
              "description": "The number of days an individual is absent when school is in session during a given reporting period.",
              "type": "number",
              "format": "double",
              "required": false
            },
            {
              "paramType": "query",
              "name": "numberOfDaysInAttendance",
              "description": "The number of days an individual is present when school is in session during a given reporting period.",
              "type": "number",
              "format": "double",
              "required": false
            },
            {
              "paramType": "query",
              "name": "numberOfDaysTardy",
              "description": "The number of days an individual is tardy during a given reporting period.",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "id",
              "description": "",
              "type": "string",
              "format": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves resources matching values of an example resource (using the \"Get By Example\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get by Example\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource(s) were successfully retrieved.  If no instances are found will return an empty collection.",
              "responseModel": "array",
              "items": {
                "$ref": "reportCard"
              }
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors.  This will typically be an issue with the query parameters or their values."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "GET",
          "nickname": "getReportCardByKey",
          "type": "reportCard",
          "parameters": [
            {
              "paramType": "query",
              "name": "educationOrganizationId",
              "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.",
              "type": "integer",
              "format": "int32",
              "required": true
            },
            {
              "paramType": "query",
              "name": "gradingPeriodBeginDate",
              "description": "Month, day, and year of the first day of the GradingPeriod.",
              "type": "string",
              "format": "date",
              "required": true
            },
            {
              "paramType": "query",
              "name": "gradingPeriodDescriptor",
              "description": "The name of the period for which grades are reported.",
              "type": "string",
              "format": "",
              "required": true
            },
            {
              "paramType": "query",
              "name": "schoolId",
              "description": "The identifier assigned to a school by the State Education Agency (SEA).",
              "type": "integer",
              "format": "int32",
              "required": true
            },
            {
              "paramType": "query",
              "name": "studentUniqueId",
              "description": "A unique alphanumeric code assigned to a student.",
              "type": "string",
              "format": "",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
              "type": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves a specific resource using the values of the resource's natural key (using the \"Get By Key\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get by Key\" search pattern. The values of the natural key of the resource must be fully specified, and the service will return the matching result (if it exists).",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource was successfully retrieved.",
              "responseModel": "reportCard"
            },
            {
              "code": 304,
              "message": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "POST",
          "nickname": "postReportCards",
          "type": "void",
          "parameters": [
            {
              "paramType": "body",
              "name": "reportCard",
              "description": "The JSON representation of the \"reportCard\" resource to be created or updated.",
              "type": "reportCard",
              "required": true
            }
          ],
          "consumes": [
            "application/json"
          ],
          "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
          "notes": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update).  Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
          "responseMessages": [
            {
              "code": 201,
              "message": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
            },
            {
              "code": 202,
              "message": "The resource has been validated and accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        }
      ]
    },
    {
      "path": "/reportCards/{id}",
      "description": "This educational entity represents the collection of student grades for courses taken during a grading period.",
      "operations": [
        {
          "method": "GET",
          "nickname": "getReportCardsById",
          "type": "reportCard",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be retrieved.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
              "type": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
          "notes": "This GET operation retrieves a resource by the specified resource identifier.",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource was successfully retrieved.",
              "responseModel": "reportCard"
            },
            {
              "code": 304,
              "message": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "PUT",
          "nickname": "putReportCard",
          "type": "void",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be updated.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "body",
              "name": "reportCard",
              "description": "The JSON representation of the \"reportCard\" resource to be updated.",
              "type": "reportCard",
              "required": true
            }
          ],
          "consumes": [
            "application/json"
          ],
          "summary": "Updates or creates a resource based on the resource identifier.",
          "notes": "The PUT operation is used to update or create a resource by identifier.  If the resource doesn't exist, the resource will be created using that identifier.  Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
          "responseMessages": [
            {
              "code": 201,
              "message": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
            },
            {
              "code": 202,
              "message": "The resource has been validated and accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "DELETE",
          "nickname": "deleteReportCardById",
          "type": "void",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be deleted.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
              "type": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "summary": "Deletes an existing resource using the resource identifier.",
          "notes": "The DELETE operation is used to delete an existing resource by identifier.  If the resource doesn't exist, an error will result (the resource will not be found).",
          "responseMessages": [
            {
              "code": 202,
              "message": "The request has accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was successfully deleted."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        }
      ]
    }
  ],
  "models": {
    "reportCard": {
      "id": "reportCard",
      "properties": {
        "id": {
          "type": "string",
          "required": true,
          "description": "The unique identifier of the resource."
        },
        "educationOrganizationReference": {
          "type": "educationOrganizationReference",
          "required": true,
          "description": "A reference to the related EducationOrganization resource."
        },
        "gradingPeriodReference": {
          "type": "gradingPeriodReference",
          "required": true,
          "description": "A reference to the related GradingPeriod resource."
        },
        "studentReference": {
          "type": "studentReference",
          "required": true,
          "description": "A reference to the related Student resource."
        },
        "gpaCumulative": {
          "type": "number",
          "format": "double",
          "required": false,
          "description": "A measure of cumulative average performance in all courses taken by an individual from the beginning of the school year through the current grading period."
        },
        "gpaGivenGradingPeriod": {
          "type": "number",
          "format": "double",
          "required": false,
          "description": "A measure of average performance in all courses taken by an individual for the current grading period."
        },
        "numberOfDaysAbsent": {
          "type": "number",
          "format": "double",
          "required": false,
          "description": "The number of days an individual is absent when school is in session during a given reporting period."
        },
        "numberOfDaysInAttendance": {
          "type": "number",
          "format": "double",
          "required": false,
          "description": "The number of days an individual is present when school is in session during a given reporting period."
        },
        "numberOfDaysTardy": {
          "type": "integer",
          "format": "int32",
          "required": false,
          "description": "The number of days an individual is tardy during a given reporting period."
        },
        "grades": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of reportCardGrades.  Grades for the classes attended by the Student for this grading period.",
          "items": {
            "$ref": "reportCardGrade"
          }
        },
        "studentCompetencyObjectives": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of reportCardStudentCompetencyObjectives.  The Student competency evaluations associated for this grading period.",
          "items": {
            "$ref": "reportCardStudentCompetencyObjective"
          }
        },
        "studentLearningObjectives": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of reportCardStudentLearningObjectives.  The StudentLearningObjective evaluations associated for this grading period.",
          "items": {
            "$ref": "reportCardStudentLearningObjective"
          }
        },
        "_etag": {
          "type": "string",
          "required": false,
          "description": "A unique system-generated value that identifies the version of the resource."
        }
      }
    },
    "educationOrganizationReference": {
      "id": "educationOrganizationReference",
      "properties": {
        "educationOrganizationId": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related educationOrganization resource."
        }
      }
    },
    "gradingPeriodReference": {
      "id": "gradingPeriodReference",
      "properties": {
        "descriptor": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The name of the period for which grades are reported."
        },
        "schoolId": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier assigned to a school by the State Education Agency (SEA)."
        },
        "beginDate": {
          "type": "string",
          "format": "date",
          "required": true,
          "description": "Month, day, and year of the first day of the GradingPeriod."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related gradingPeriod resource."
        }
      }
    },
    "studentReference": {
      "id": "studentReference",
      "properties": {
        "studentUniqueId": {
          "type": "string",
          "format": "int32",
          "required": true,
          "description": "A unique alphanumeric code assigned to a student."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related student resource."
        }
      }
    },
    "reportCardGrade": {
      "id": "reportCardGrade",
      "properties": {
        "gradeReference": {
          "type": "gradeReference",
          "required": true,
          "description": "A reference to the related Grade resource."
        }
      }
    },
    "reportCardStudentCompetencyObjective": {
      "id": "reportCardStudentCompetencyObjective",
      "properties": {
        "studentCompetencyObjectiveReference": {
          "type": "studentCompetencyObjectiveReference",
          "required": true,
          "description": "A reference to the related StudentCompetencyObjective resource."
        }
      }
    },
    "reportCardStudentLearningObjective": {
      "id": "reportCardStudentLearningObjective",
      "properties": {
        "studentLearningObjectiveReference": {
          "type": "studentLearningObjectiveReference",
          "required": true,
          "description": "A reference to the related StudentLearningObjective resource."
        }
      }
    },
    "gradeReference": {
      "id": "gradeReference",
      "properties": {
        "gradingPeriodDescriptor": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The name of the period for which grades are reported."
        },
        "gradingPeriodBeginDate": {
          "type": "string",
          "format": "date",
          "required": true,
          "description": "Month, day, and year of the first day of the GradingPeriod."
        },
        "type": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The type of grade reported (e.g., Exam, Final, Grading Period)."
        },
        "studentUniqueId": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A unique alphanumeric code assigned to a student."
        },
        "schoolId": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier assigned to a school by the State Education Agency (SEA)."
        },
        "classPeriodName": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules)."
        },
        "classroomIdentificationCode": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity."
        },
        "localCourseCode": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The local code assigned by the School that identifies the course offering provided for the instruction of students."
        },
        "uniqueSectionCode": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned."
        },
        "sequenceOfCourse": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1."
        },
        "schoolYear": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier for the school year."
        },
        "termDescriptor": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The term for the Session during the school year."
        },
        "beginDate": {
          "type": "string",
          "format": "date",
          "required": true,
          "description": "Month, day, and year of the Student's entry or assignment to the Section."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related grade resource."
        }
      }
    },
    "studentCompetencyObjectiveReference": {
      "id": "studentCompetencyObjectiveReference",
      "properties": {
        "studentUniqueId": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A unique alphanumeric code assigned to a student."
        },
        "objective": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The designated title of the CompetencyObjective."
        },
        "objectiveGradeLevelDescriptor": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The grade level for which the CompetencyObjective is targeted."
        },
        "objectiveEducationOrganizationId": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID."
        },
        "schoolId": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier assigned to a school by the State Education Agency (SEA)."
        },
        "gradingPeriodDescriptor": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The name of the period for which grades are reported."
        },
        "gradingPeriodBeginDate": {
          "type": "string",
          "format": "date",
          "required": true,
          "description": "Month, day, and year of the first day of the GradingPeriod."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related studentCompetencyObjective resource."
        }
      }
    },
    "studentLearningObjectiveReference": {
      "id": "studentLearningObjectiveReference",
      "properties": {
        "gradingPeriodBeginDate": {
          "type": "string",
          "format": "date",
          "required": true,
          "description": "Month, day, and year of the first day of the GradingPeriod."
        },
        "gradingPeriodDescriptor": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The name of the period for which grades are reported."
        },
        "learningObjectiveId": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A)."
        },
        "namespace": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "Namespace for the LearningObjective."
        },
        "schoolId": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier assigned to a school by the State Education Agency (SEA)."
        },
        "studentUniqueId": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A unique alphanumeric code assigned to a student."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related studentLearningObjective resource."
        }
      }
    },
    "webServiceError": {
      "id": "webServiceError",
      "properties": {
        "message": {
          "type": "string",
          "required": false,
          "description": "The \"user-friendly\" error message."
        },
        "exceptionMessage": {
          "type": "string",
          "required": false,
          "description": "The system-generated exception message."
        },
        "exceptionType": {
          "type": "string",
          "required": false,
          "description": "The type of the exception."
        },
        "stackTrace": {
          "type": "string",
          "required": false,
          "description": "The server-side stack trace (only available in DEBUG builds)."
        }
      }
    },
    "link": {
      "id": "link",
      "properties": {
        "rel": {
          "type": "string",
          "required": false,
          "description": "Describes the nature of the relationship to the referenced resource."
        },
        "href": {
          "type": "string",
          "required": false,
          "description": "The URL to the related resource."
        }
      }
    }
  }
}
