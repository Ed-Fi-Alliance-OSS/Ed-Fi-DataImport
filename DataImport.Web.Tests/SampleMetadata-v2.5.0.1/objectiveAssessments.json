
{
  "apiVersion": "2.0",
  "swaggerVersion": "1.2",
  "basePath": "http://test-ods-v2.5.0.1.example.com/api/v2.0/2019",
  "resourcePath": "/objectiveAssessments",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/objectiveAssessments",
      "description": "This entity represents subtests that assess specific learning objectives.",
      "operations": [
        {
          "method": "GET",
          "nickname": "getObjectiveAssessmentsAll",
          "type": "array",
          "items": {
            "$ref": "objectiveAssessment"
          },
          "parameters": [
            {
              "paramType": "query",
              "name": "offset",
              "description": "Indicates how many items should be skipped before returning results.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "limit",
              "description": "Indicates the maximum number of items that should be returned in the results (defaults to 25).",
              "type": "integer",
              "required": false,
              "minimum": 1,
              "maximum": 250
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get All\" pattern. In this version of the API there is support for paging.",
          "responseMessages": [
            {
              "code": 200,
              "message": "The matching resource(s) were successfully retrieved.  If no instances are found will return an empty collection.",
              "responseModel": "array",
              "items": {
                "$ref": "objectiveAssessment"
              }
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors.  This will typically be an issue with the query parameters or their values."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "GET",
          "nickname": "getObjectiveAssessmentsByExample",
          "type": "array",
          "items": {
            "$ref": "objectiveAssessment"
          },
          "parameters": [
            {
              "paramType": "query",
              "name": "offset",
              "description": "Indicates how many items should be skipped before returning results.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "limit",
              "description": "Indicates the maximum number of items that should be returned in the results (defaults to 25).",
              "type": "integer",
              "required": false,
              "minimum": 1,
              "maximum": 250
            },
            {
              "paramType": "query",
              "name": "identificationCode",
              "description": "A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "assessmentIdentifier",
              "description": "A unique number or alphanumeric code assigned to an assessment.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "namespace",
              "description": "Namespace for the Assessment.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "parentIdentificationCode",
              "description": "A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "maxRawScore",
              "description": "The maximum raw score achievable across all assessment items that are correct and scored at the maximum.",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "percentOfAssessment",
              "description": "The percentage of the Assessment that tests this objective.",
              "type": "number",
              "format": "double",
              "required": false
            },
            {
              "paramType": "query",
              "name": "nomenclature",
              "description": "Reflects the specific nomenclature used for this level of ObjectiveAssessment.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "description",
              "description": "The description of the ObjectiveAssessment (e.g., vocabulary, measurement, or geometry).",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "id",
              "description": "",
              "type": "string",
              "format": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves resources matching values of an example resource (using the \"Get By Example\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get by Example\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource(s) were successfully retrieved.  If no instances are found will return an empty collection.",
              "responseModel": "array",
              "items": {
                "$ref": "objectiveAssessment"
              }
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors.  This will typically be an issue with the query parameters or their values."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "GET",
          "nickname": "getObjectiveAssessmentByKey",
          "type": "objectiveAssessment",
          "parameters": [
            {
              "paramType": "query",
              "name": "assessmentIdentifier",
              "description": "A unique number or alphanumeric code assigned to an assessment.",
              "type": "string",
              "format": "",
              "required": true
            },
            {
              "paramType": "query",
              "name": "identificationCode",
              "description": "A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.",
              "type": "string",
              "format": "",
              "required": true
            },
            {
              "paramType": "query",
              "name": "namespace",
              "description": "Namespace for the Assessment.",
              "type": "string",
              "format": "",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
              "type": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves a specific resource using the values of the resource's natural key (using the \"Get By Key\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get by Key\" search pattern. The values of the natural key of the resource must be fully specified, and the service will return the matching result (if it exists).",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource was successfully retrieved.",
              "responseModel": "objectiveAssessment"
            },
            {
              "code": 304,
              "message": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "POST",
          "nickname": "postObjectiveAssessments",
          "type": "void",
          "parameters": [
            {
              "paramType": "body",
              "name": "objectiveAssessment",
              "description": "The JSON representation of the \"objectiveAssessment\" resource to be created or updated.",
              "type": "objectiveAssessment",
              "required": true
            }
          ],
          "consumes": [
            "application/json"
          ],
          "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
          "notes": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update).  Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
          "responseMessages": [
            {
              "code": 201,
              "message": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
            },
            {
              "code": 202,
              "message": "The resource has been validated and accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        }
      ]
    },
    {
      "path": "/objectiveAssessments/{id}",
      "description": "This entity represents subtests that assess specific learning objectives.",
      "operations": [
        {
          "method": "GET",
          "nickname": "getObjectiveAssessmentsById",
          "type": "objectiveAssessment",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be retrieved.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
              "type": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
          "notes": "This GET operation retrieves a resource by the specified resource identifier.",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource was successfully retrieved.",
              "responseModel": "objectiveAssessment"
            },
            {
              "code": 304,
              "message": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "PUT",
          "nickname": "putObjectiveAssessment",
          "type": "void",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be updated.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "body",
              "name": "objectiveAssessment",
              "description": "The JSON representation of the \"objectiveAssessment\" resource to be updated.",
              "type": "objectiveAssessment",
              "required": true
            }
          ],
          "consumes": [
            "application/json"
          ],
          "summary": "Updates or creates a resource based on the resource identifier.",
          "notes": "The PUT operation is used to update or create a resource by identifier.  If the resource doesn't exist, the resource will be created using that identifier.  Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
          "responseMessages": [
            {
              "code": 201,
              "message": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
            },
            {
              "code": 202,
              "message": "The resource has been validated and accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "DELETE",
          "nickname": "deleteObjectiveAssessmentById",
          "type": "void",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be deleted.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
              "type": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "summary": "Deletes an existing resource using the resource identifier.",
          "notes": "The DELETE operation is used to delete an existing resource by identifier.  If the resource doesn't exist, an error will result (the resource will not be found).",
          "responseMessages": [
            {
              "code": 202,
              "message": "The request has accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was successfully deleted."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        }
      ]
    }
  ],
  "models": {
    "objectiveAssessment": {
      "id": "objectiveAssessment",
      "properties": {
        "id": {
          "type": "string",
          "required": true,
          "description": "The unique identifier of the resource."
        },
        "assessmentReference": {
          "type": "assessmentReference",
          "required": true,
          "description": "A reference to the related Assessment resource."
        },
        "parentObjectiveAssessmentReference": {
          "type": "objectiveAssessmentReference",
          "required": false,
          "description": "A reference to the related ObjectiveAssessment resource."
        },
        "description": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The description of the ObjectiveAssessment (e.g., vocabulary, measurement, or geometry)."
        },
        "identificationCode": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity."
        },
        "maxRawScore": {
          "type": "integer",
          "format": "int32",
          "required": false,
          "description": "The maximum raw score achievable across all assessment items that are correct and scored at the maximum."
        },
        "nomenclature": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "Reflects the specific nomenclature used for this level of ObjectiveAssessment."
        },
        "percentOfAssessment": {
          "type": "number",
          "format": "double",
          "required": false,
          "description": "The percentage of the Assessment that tests this objective."
        },
        "assessmentItems": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of objectiveAssessmentAssessmentItems.  References individual test items, if appropriate.",
          "items": {
            "$ref": "objectiveAssessmentAssessmentItem"
          }
        },
        "learningObjectives": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of objectiveAssessmentLearningObjectives.  References the LearningObjective(s) the ObjectiveAssessment tests.",
          "items": {
            "$ref": "objectiveAssessmentLearningObjective"
          }
        },
        "learningStandards": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of objectiveAssessmentLearningStandards.  LearningStandard tested by this ObjectiveAssessment.",
          "items": {
            "$ref": "objectiveAssessmentLearningStandard"
          }
        },
        "performanceLevels": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of objectiveAssessmentPerformanceLevels.  Definition of the performance levels and the associated cut scores. Three styles are supported:          1. Specification of performance level by minimum and maximum score          2. Specification of performance level by cut score, using only minimum score          3. Specification of performance level without any mapping to scores",
          "items": {
            "$ref": "objectiveAssessmentPerformanceLevel"
          }
        },
        "scores": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of objectiveAssessmentScores.  Definition of the scores to be expected from this objective assessment.",
          "items": {
            "$ref": "objectiveAssessmentScore"
          }
        },
        "_etag": {
          "type": "string",
          "required": false,
          "description": "A unique system-generated value that identifies the version of the resource."
        }
      }
    },
    "assessmentReference": {
      "id": "assessmentReference",
      "properties": {
        "identifier": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A unique number or alphanumeric code assigned to an assessment."
        },
        "namespace": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "Namespace for the Assessment."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related assessment resource."
        }
      }
    },
    "objectiveAssessmentReference": {
      "id": "objectiveAssessmentReference",
      "properties": {
        "assessmentIdentifier": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A unique number or alphanumeric code assigned to an assessment."
        },
        "identificationCode": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity."
        },
        "namespace": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "Namespace for the Assessment."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related objectiveAssessment resource."
        }
      }
    },
    "objectiveAssessmentAssessmentItem": {
      "id": "objectiveAssessmentAssessmentItem",
      "properties": {
        "assessmentItemReference": {
          "type": "assessmentItemReference",
          "required": true,
          "description": "A reference to the related AssessmentItem resource."
        }
      }
    },
    "objectiveAssessmentLearningObjective": {
      "id": "objectiveAssessmentLearningObjective",
      "properties": {
        "learningObjectiveReference": {
          "type": "learningObjectiveReference",
          "required": true,
          "description": "A reference to the related LearningObjective resource."
        }
      }
    },
    "objectiveAssessmentLearningStandard": {
      "id": "objectiveAssessmentLearningStandard",
      "properties": {
        "learningStandardReference": {
          "type": "learningStandardReference",
          "required": true,
          "description": "A reference to the related LearningStandard resource."
        }
      }
    },
    "objectiveAssessmentPerformanceLevel": {
      "id": "objectiveAssessmentPerformanceLevel",
      "properties": {
        "assessmentReportingMethodType": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used."
        },
        "performanceLevelDescriptor": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The performance level(s) defined for the assessment."
        },
        "resultDatatypeType": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The datatype of the result. The results can be expressed as a number, percentile,range, level, etc."
        },
        "minimumScore": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The minimum score required to make the indicated level of performance."
        },
        "maximumScore": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The maximum score to make the indicated level of performance."
        }
      }
    },
    "objectiveAssessmentScore": {
      "id": "objectiveAssessmentScore",
      "properties": {
        "assessmentReportingMethodType": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used."
        },
        "resultDatatypeType": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The datatype of the result. The results can be expressed as a number, percentile, range, level, etc."
        },
        "minimumScore": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The minimum score possible on the assessment."
        },
        "maximumScore": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The maximum score possible on the assessment."
        }
      }
    },
    "assessmentItemReference": {
      "id": "assessmentItemReference",
      "properties": {
        "assessmentIdentifier": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A unique number or alphanumeric code assigned to an assessment."
        },
        "identificationCode": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity."
        },
        "namespace": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "Namespace for the Assessment."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related assessmentItem resource."
        }
      }
    },
    "learningObjectiveReference": {
      "id": "learningObjectiveReference",
      "properties": {
        "learningObjectiveId": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A)."
        },
        "namespace": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "Namespace for the LearningObjective."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related learningObjective resource."
        }
      }
    },
    "learningStandardReference": {
      "id": "learningStandardReference",
      "properties": {
        "learningStandardId": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The identifier for the specific learning standard (e.g., 111.15.3.1.A)."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related learningStandard resource."
        }
      }
    },
    "webServiceError": {
      "id": "webServiceError",
      "properties": {
        "message": {
          "type": "string",
          "required": false,
          "description": "The \"user-friendly\" error message."
        },
        "exceptionMessage": {
          "type": "string",
          "required": false,
          "description": "The system-generated exception message."
        },
        "exceptionType": {
          "type": "string",
          "required": false,
          "description": "The type of the exception."
        },
        "stackTrace": {
          "type": "string",
          "required": false,
          "description": "The server-side stack trace (only available in DEBUG builds)."
        }
      }
    },
    "link": {
      "id": "link",
      "properties": {
        "rel": {
          "type": "string",
          "required": false,
          "description": "Describes the nature of the relationship to the referenced resource."
        },
        "href": {
          "type": "string",
          "required": false,
          "description": "The URL to the related resource."
        }
      }
    }
  }
}
