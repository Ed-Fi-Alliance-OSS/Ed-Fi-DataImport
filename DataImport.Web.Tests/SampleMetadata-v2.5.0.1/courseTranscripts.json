
{
  "apiVersion": "2.0",
  "swaggerVersion": "1.2",
  "basePath": "http://test-ods-v2.5.0.1.example.com/api/v2.0/2019",
  "resourcePath": "/courseTranscripts",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/courseTranscripts",
      "description": "This entity is the final record of a student's performance in their courses at the end of a semester or school year.",
      "operations": [
        {
          "method": "GET",
          "nickname": "getCourseTranscriptsAll",
          "type": "array",
          "items": {
            "$ref": "courseTranscript"
          },
          "parameters": [
            {
              "paramType": "query",
              "name": "offset",
              "description": "Indicates how many items should be skipped before returning results.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "limit",
              "description": "Indicates the maximum number of items that should be returned in the results (defaults to 25).",
              "type": "integer",
              "required": false,
              "minimum": 1,
              "maximum": 250
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get All\" pattern. In this version of the API there is support for paging.",
          "responseMessages": [
            {
              "code": 200,
              "message": "The matching resource(s) were successfully retrieved.  If no instances are found will return an empty collection.",
              "responseModel": "array",
              "items": {
                "$ref": "courseTranscript"
              }
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors.  This will typically be an issue with the query parameters or their values."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "GET",
          "nickname": "getCourseTranscriptsByExample",
          "type": "array",
          "items": {
            "$ref": "courseTranscript"
          },
          "parameters": [
            {
              "paramType": "query",
              "name": "offset",
              "description": "Indicates how many items should be skipped before returning results.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "limit",
              "description": "Indicates the maximum number of items that should be returned in the results (defaults to 25).",
              "type": "integer",
              "required": false,
              "minimum": 1,
              "maximum": 250
            },
            {
              "paramType": "query",
              "name": "courseAttemptResultType",
              "description": "The result from the student's attempt to take the course, for example:          Pass          Fail          Incomplete          Withdrawn.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "courseEducationOrganizationId",
              "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "courseCode",
              "description": "A unique alphanumeric code assigned to a course.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "studentUniqueId",
              "description": "A unique alphanumeric code assigned to a student.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "educationOrganizationId",
              "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "schoolYear",
              "description": "The identifier for the school year.",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "termDescriptor",
              "description": "The term for the session during the school year.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "schoolId",
              "description": "The identifier assigned to a school by the State Education Agency (SEA).",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "courseRepeatCodeType",
              "description": "Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student's academic grade average.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "attemptedCreditType",
              "description": "The type of credits or units of value awarded for the completion of a course.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "earnedCreditType",
              "description": "The type of credits or units of value awarded for the completion of a course.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "whenTakenGradeLevelDescriptor",
              "description": "Student's grade level at time of course.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "methodCreditEarnedType",
              "description": "The method the credits were earned (e.g., Classroom, Examination, Transfer).",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "attemptedCredits",
              "description": "The value of credits or units of value awarded for the completion of a course.",
              "type": "number",
              "format": "double",
              "required": false
            },
            {
              "paramType": "query",
              "name": "attemptedCreditConversion",
              "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
              "type": "number",
              "format": "double",
              "required": false
            },
            {
              "paramType": "query",
              "name": "earnedCredits",
              "description": "The value of credits or units of value awarded for the completion of a course.",
              "type": "number",
              "format": "double",
              "required": false
            },
            {
              "paramType": "query",
              "name": "earnedCreditConversion",
              "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.",
              "type": "number",
              "format": "double",
              "required": false
            },
            {
              "paramType": "query",
              "name": "finalLetterGradeEarned",
              "description": "The final indicator of student performance in a class as submitted by the instructor.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "finalNumericGradeEarned",
              "description": "The final indicator of student performance in a class as submitted by the instructor.",
              "type": "number",
              "format": "double",
              "required": false
            },
            {
              "paramType": "query",
              "name": "courseTitle",
              "description": "The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "alternativeCourseTitle",
              "description": "The descriptive name given to a course of study offered in the school, if different from the CourseTitle.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "alternativeCourseCode",
              "description": "The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "id",
              "description": "",
              "type": "string",
              "format": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves resources matching values of an example resource (using the \"Get By Example\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get by Example\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource(s) were successfully retrieved.  If no instances are found will return an empty collection.",
              "responseModel": "array",
              "items": {
                "$ref": "courseTranscript"
              }
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors.  This will typically be an issue with the query parameters or their values."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "GET",
          "nickname": "getCourseTranscriptByKey",
          "type": "courseTranscript",
          "parameters": [
            {
              "paramType": "query",
              "name": "courseAttemptResultType",
              "description": "The result from the student's attempt to take the course, for example:          Pass          Fail          Incomplete          Withdrawn.",
              "type": "string",
              "format": "",
              "required": true
            },
            {
              "paramType": "query",
              "name": "courseCode",
              "description": "A unique alphanumeric code assigned to a course.",
              "type": "string",
              "format": "",
              "required": true
            },
            {
              "paramType": "query",
              "name": "courseEducationOrganizationId",
              "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.",
              "type": "integer",
              "format": "int32",
              "required": true
            },
            {
              "paramType": "query",
              "name": "educationOrganizationId",
              "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.",
              "type": "integer",
              "format": "int32",
              "required": true
            },
            {
              "paramType": "query",
              "name": "schoolYear",
              "description": "The identifier for the school year.",
              "type": "integer",
              "format": "int32",
              "required": true
            },
            {
              "paramType": "query",
              "name": "studentUniqueId",
              "description": "A unique alphanumeric code assigned to a student.",
              "type": "string",
              "format": "",
              "required": true
            },
            {
              "paramType": "query",
              "name": "termDescriptor",
              "description": "The term for the session during the school year.",
              "type": "string",
              "format": "",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
              "type": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves a specific resource using the values of the resource's natural key (using the \"Get By Key\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get by Key\" search pattern. The values of the natural key of the resource must be fully specified, and the service will return the matching result (if it exists).",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource was successfully retrieved.",
              "responseModel": "courseTranscript"
            },
            {
              "code": 304,
              "message": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "POST",
          "nickname": "postCourseTranscripts",
          "type": "void",
          "parameters": [
            {
              "paramType": "body",
              "name": "courseTranscript",
              "description": "The JSON representation of the \"courseTranscript\" resource to be created or updated.",
              "type": "courseTranscript",
              "required": true
            }
          ],
          "consumes": [
            "application/json"
          ],
          "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
          "notes": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update).  Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
          "responseMessages": [
            {
              "code": 201,
              "message": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
            },
            {
              "code": 202,
              "message": "The resource has been validated and accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        }
      ]
    },
    {
      "path": "/courseTranscripts/{id}",
      "description": "This entity is the final record of a student's performance in their courses at the end of a semester or school year.",
      "operations": [
        {
          "method": "GET",
          "nickname": "getCourseTranscriptsById",
          "type": "courseTranscript",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be retrieved.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
              "type": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
          "notes": "This GET operation retrieves a resource by the specified resource identifier.",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource was successfully retrieved.",
              "responseModel": "courseTranscript"
            },
            {
              "code": 304,
              "message": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "PUT",
          "nickname": "putCourseTranscript",
          "type": "void",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be updated.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "body",
              "name": "courseTranscript",
              "description": "The JSON representation of the \"courseTranscript\" resource to be updated.",
              "type": "courseTranscript",
              "required": true
            }
          ],
          "consumes": [
            "application/json"
          ],
          "summary": "Updates or creates a resource based on the resource identifier.",
          "notes": "The PUT operation is used to update or create a resource by identifier.  If the resource doesn't exist, the resource will be created using that identifier.  Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
          "responseMessages": [
            {
              "code": 201,
              "message": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
            },
            {
              "code": 202,
              "message": "The resource has been validated and accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "DELETE",
          "nickname": "deleteCourseTranscriptById",
          "type": "void",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be deleted.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
              "type": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "summary": "Deletes an existing resource using the resource identifier.",
          "notes": "The DELETE operation is used to delete an existing resource by identifier.  If the resource doesn't exist, an error will result (the resource will not be found).",
          "responseMessages": [
            {
              "code": 202,
              "message": "The request has accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was successfully deleted."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        }
      ]
    }
  ],
  "models": {
    "courseTranscript": {
      "id": "courseTranscript",
      "properties": {
        "id": {
          "type": "string",
          "required": true,
          "description": "The unique identifier of the resource."
        },
        "courseReference": {
          "type": "courseReference",
          "required": true,
          "description": "A reference to the related Course resource."
        },
        "schoolReference": {
          "type": "schoolReference",
          "required": false,
          "description": "A reference to the related School resource."
        },
        "studentAcademicRecordReference": {
          "type": "studentAcademicRecordReference",
          "required": true,
          "description": "A reference to the related StudentAcademicRecord resource."
        },
        "alternativeCourseCode": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code."
        },
        "alternativeCourseTitle": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The descriptive name given to a course of study offered in the school, if different from the CourseTitle."
        },
        "attemptedCreditConversion": {
          "type": "number",
          "format": "double",
          "required": false,
          "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units."
        },
        "attemptedCredits": {
          "type": "number",
          "format": "double",
          "required": false,
          "description": "The value of credits or units of value awarded for the completion of a course."
        },
        "attemptedCreditType": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The type of credits or units of value awarded for the completion of a course."
        },
        "courseAttemptResultType": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The result from the student's attempt to take the course, for example:          Pass          Fail          Incomplete          Withdrawn."
        },
        "courseRepeatCodeType": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student's academic grade average."
        },
        "courseTitle": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts)."
        },
        "earnedCreditConversion": {
          "type": "number",
          "format": "double",
          "required": false,
          "description": "Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units."
        },
        "earnedCredits": {
          "type": "number",
          "format": "double",
          "required": true,
          "description": "The value of credits or units of value awarded for the completion of a course."
        },
        "earnedCreditType": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The type of credits or units of value awarded for the completion of a course."
        },
        "finalLetterGradeEarned": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The final indicator of student performance in a class as submitted by the instructor."
        },
        "finalNumericGradeEarned": {
          "type": "number",
          "format": "double",
          "required": false,
          "description": "The final indicator of student performance in a class as submitted by the instructor."
        },
        "methodCreditEarnedType": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The method the credits were earned (e.g., Classroom, Examination, Transfer)."
        },
        "whenTakenGradeLevelDescriptor": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "Student's grade level at time of course."
        },
        "earnedAdditionalCredits": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of courseTranscriptEarnedAdditionalCredits.  The number of additional credits a student attempted and could earn for successfully completing a given course (e.g., dual credit, AP, IB).",
          "items": {
            "$ref": "courseTranscriptEarnedAdditionalCredits"
          }
        },
        "_etag": {
          "type": "string",
          "required": false,
          "description": "A unique system-generated value that identifies the version of the resource."
        }
      }
    },
    "courseReference": {
      "id": "courseReference",
      "properties": {
        "educationOrganizationId": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID."
        },
        "code": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A unique alphanumeric code assigned to a course."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related course resource."
        }
      }
    },
    "schoolReference": {
      "id": "schoolReference",
      "properties": {
        "schoolId": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier assigned to a school by the State Education Agency (SEA)."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related school resource."
        }
      }
    },
    "studentAcademicRecordReference": {
      "id": "studentAcademicRecordReference",
      "properties": {
        "studentUniqueId": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "A unique alphanumeric code assigned to a student."
        },
        "educationOrganizationId": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID."
        },
        "schoolYear": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier for the school year."
        },
        "termDescriptor": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The term for the session during the school year."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related studentAcademicRecord resource."
        }
      }
    },
    "courseTranscriptEarnedAdditionalCredits": {
      "id": "courseTranscriptEarnedAdditionalCredits",
      "properties": {
        "additionalCreditType": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The type of credits or units of value awarded for the completion of a course."
        },
        "credits": {
          "type": "number",
          "format": "double",
          "required": true,
          "description": "The value of credits or units of value awarded for the completion of a course"
        }
      }
    },
    "webServiceError": {
      "id": "webServiceError",
      "properties": {
        "message": {
          "type": "string",
          "required": false,
          "description": "The \"user-friendly\" error message."
        },
        "exceptionMessage": {
          "type": "string",
          "required": false,
          "description": "The system-generated exception message."
        },
        "exceptionType": {
          "type": "string",
          "required": false,
          "description": "The type of the exception."
        },
        "stackTrace": {
          "type": "string",
          "required": false,
          "description": "The server-side stack trace (only available in DEBUG builds)."
        }
      }
    },
    "link": {
      "id": "link",
      "properties": {
        "rel": {
          "type": "string",
          "required": false,
          "description": "Describes the nature of the relationship to the referenced resource."
        },
        "href": {
          "type": "string",
          "required": false,
          "description": "The URL to the related resource."
        }
      }
    }
  }
}
