
{
  "apiVersion": "2.0",
  "swaggerVersion": "1.2",
  "basePath": "http://test-ods-v2.5.0.1.example.com/api/v2.0/2019",
  "resourcePath": "/studentSpecialEducationProgramAssociations",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/studentSpecialEducationProgramAssociations",
      "description": "This association represents the special education program(s) that a student participates in or receives services from. The association is an extension of the StudentProgramAssociation particular for special education programs.",
      "operations": [
        {
          "method": "GET",
          "nickname": "getStudentSpecialEducationProgramAssociationsAll",
          "type": "array",
          "items": {
            "$ref": "studentSpecialEducationProgramAssociation"
          },
          "parameters": [
            {
              "paramType": "query",
              "name": "offset",
              "description": "Indicates how many items should be skipped before returning results.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "limit",
              "description": "Indicates the maximum number of items that should be returned in the results (defaults to 25).",
              "type": "integer",
              "required": false,
              "minimum": 1,
              "maximum": 250
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves resources based with paging capabilities (using the \"Get All\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get All\" pattern. In this version of the API there is support for paging.",
          "responseMessages": [
            {
              "code": 200,
              "message": "The matching resource(s) were successfully retrieved.  If no instances are found will return an empty collection.",
              "responseModel": "array",
              "items": {
                "$ref": "studentSpecialEducationProgramAssociation"
              }
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors.  This will typically be an issue with the query parameters or their values."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "GET",
          "nickname": "getStudentSpecialEducationProgramAssociationsByExample",
          "type": "array",
          "items": {
            "$ref": "studentSpecialEducationProgramAssociation"
          },
          "parameters": [
            {
              "paramType": "query",
              "name": "offset",
              "description": "Indicates how many items should be skipped before returning results.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "limit",
              "description": "Indicates the maximum number of items that should be returned in the results (defaults to 25).",
              "type": "integer",
              "required": false,
              "minimum": 1,
              "maximum": 250
            },
            {
              "paramType": "query",
              "name": "educationOrganizationId",
              "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "programType",
              "description": "The type of program.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "programName",
              "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "programEducationOrganizationId",
              "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.",
              "type": "integer",
              "format": "int32",
              "required": false
            },
            {
              "paramType": "query",
              "name": "beginDate",
              "description": "The month, day, and year on which the Student first received services.",
              "type": "string",
              "format": "date",
              "required": false
            },
            {
              "paramType": "query",
              "name": "specialEducationSettingDescriptor",
              "description": "The major instructional setting (more than 50 percent of a student's special education program).",
              "type": "string",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "ideaEligibility",
              "description": "Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA).",
              "type": "boolean",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "specialEducationHoursPerWeek",
              "description": "The number of hours per week for special education instruction and therapy.",
              "type": "number",
              "format": "double",
              "required": false
            },
            {
              "paramType": "query",
              "name": "schoolHoursPerWeek",
              "description": "Indicate the total number of hours of instructional time per week for the school that the student attends.",
              "type": "number",
              "format": "double",
              "required": false
            },
            {
              "paramType": "query",
              "name": "multiplyDisabled",
              "description": "Indicates whether the Student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements.",
              "type": "boolean",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "medicallyFragile",
              "description": "Indicates whether the Student receiving special education and related services is:          1) in the age range of birth to 22 years, and          2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and          3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and          4) lives with ongoing threat to his or her continued well-being.          Aligns with federal requirements.",
              "type": "boolean",
              "format": "",
              "required": false
            },
            {
              "paramType": "query",
              "name": "lastEvaluationDate",
              "description": "The date of the last special education evaluation.",
              "type": "string",
              "format": "date",
              "required": false
            },
            {
              "paramType": "query",
              "name": "iepReviewDate",
              "description": "The date of the last IEP review.",
              "type": "string",
              "format": "date",
              "required": false
            },
            {
              "paramType": "query",
              "name": "iepBeginDate",
              "description": "The effective date of the most recent IEP.",
              "type": "string",
              "format": "date",
              "required": false
            },
            {
              "paramType": "query",
              "name": "iepEndDate",
              "description": "The end date of the most recent IEP.",
              "type": "string",
              "format": "date",
              "required": false
            },
            {
              "paramType": "query",
              "name": "studentUniqueId",
              "description": "A unique alphanumeric code assigned to a student.",
              "type": "string",
              "format": "",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves resources matching values of an example resource (using the \"Get By Example\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get by Example\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource(s) were successfully retrieved.  If no instances are found will return an empty collection.",
              "responseModel": "array",
              "items": {
                "$ref": "studentSpecialEducationProgramAssociation"
              }
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors.  This will typically be an issue with the query parameters or their values."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "GET",
          "nickname": "getStudentSpecialEducationProgramAssociationByKey",
          "type": "studentSpecialEducationProgramAssociation",
          "parameters": [
            {
              "paramType": "query",
              "name": "beginDate",
              "description": "The month, day, and year on which the Student first received services.",
              "type": "string",
              "format": "date",
              "required": true
            },
            {
              "paramType": "query",
              "name": "educationOrganizationId",
              "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.",
              "type": "integer",
              "format": "int32",
              "required": true
            },
            {
              "paramType": "query",
              "name": "programEducationOrganizationId",
              "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.",
              "type": "integer",
              "format": "int32",
              "required": true
            },
            {
              "paramType": "query",
              "name": "programName",
              "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.",
              "type": "string",
              "format": "",
              "required": true
            },
            {
              "paramType": "query",
              "name": "programType",
              "description": "The type of program.",
              "type": "string",
              "format": "",
              "required": true
            },
            {
              "paramType": "query",
              "name": "studentUniqueId",
              "description": "A unique alphanumeric code assigned to a student.",
              "type": "string",
              "format": "",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
              "type": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves a specific resource using the values of the resource's natural key (using the \"Get By Key\" pattern).",
          "notes": "This GET operation provides access to resources using the \"Get by Key\" search pattern. The values of the natural key of the resource must be fully specified, and the service will return the matching result (if it exists).",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource was successfully retrieved.",
              "responseModel": "studentSpecialEducationProgramAssociation"
            },
            {
              "code": 304,
              "message": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "POST",
          "nickname": "postStudentSpecialEducationProgramAssociations",
          "type": "void",
          "parameters": [
            {
              "paramType": "body",
              "name": "studentSpecialEducationProgramAssociation",
              "description": "The JSON representation of the \"studentSpecialEducationProgramAssociation\" resource to be created or updated.",
              "type": "studentSpecialEducationProgramAssociation",
              "required": true
            }
          ],
          "consumes": [
            "application/json"
          ],
          "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
          "notes": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update).  Clients should NOT include the resource \"id\" in the JSON body because it will result in an error (you must use a PUT operation to update a resource by \"id\"). The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately.",
          "responseMessages": [
            {
              "code": 201,
              "message": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
            },
            {
              "code": 202,
              "message": "The resource has been validated and accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        }
      ]
    },
    {
      "path": "/studentSpecialEducationProgramAssociations/{id}",
      "description": "This association represents the special education program(s) that a student participates in or receives services from. The association is an extension of the StudentProgramAssociation particular for special education programs.",
      "operations": [
        {
          "method": "GET",
          "nickname": "getStudentSpecialEducationProgramAssociationsById",
          "type": "studentSpecialEducationProgramAssociation",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be retrieved.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "The previously returned ETag header value, used here to prevent the unnecessary data transfer of an unchanged resource.",
              "type": "string",
              "required": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "summary": "Retrieves a specific resource using the resource's identifier (using the \"Get By Id\" pattern).",
          "notes": "This GET operation retrieves a resource by the specified resource identifier.",
          "responseMessages": [
            {
              "code": 200,
              "message": "The resource was successfully retrieved.",
              "responseModel": "studentSpecialEducationProgramAssociation"
            },
            {
              "code": 304,
              "message": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "PUT",
          "nickname": "putStudentSpecialEducationProgramAssociation",
          "type": "void",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be updated.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The ETag header value used to prevent the PUT from updating a resource modified by another consumer.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "body",
              "name": "studentSpecialEducationProgramAssociation",
              "description": "The JSON representation of the \"studentSpecialEducationProgramAssociation\" resource to be updated.",
              "type": "studentSpecialEducationProgramAssociation",
              "required": true
            }
          ],
          "consumes": [
            "application/json"
          ],
          "summary": "Updates or creates a resource based on the resource identifier.",
          "notes": "The PUT operation is used to update or create a resource by identifier.  If the resource doesn't exist, the resource will be created using that identifier.  Additionally, natural key values cannot be changed using this operation, and will not be modified in the database.  If the resource \"id\" is provided in the JSON body, it will be ignored as well.",
          "responseMessages": [
            {
              "code": 201,
              "message": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
            },
            {
              "code": 202,
              "message": "The resource has been validated and accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        },
        {
          "method": "DELETE",
          "nickname": "deleteStudentSpecialEducationProgramAssociationById",
          "type": "void",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "A resource identifier specifying the resource to be deleted.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The ETag header value used to prevent the DELETE from removing a resource modified by another consumer.",
              "type": "string",
              "required": false,
              "allowMultiple": false
            }
          ],
          "summary": "Deletes an existing resource using the resource identifier.",
          "notes": "The DELETE operation is used to delete an existing resource by identifier.  If the resource doesn't exist, an error will result (the resource will not be found).",
          "responseMessages": [
            {
              "code": 202,
              "message": "The request has accepted by the service, but processing has not yet completed due to current system load. Processing may still fail due to violation of referential integrity requirements."
            },
            {
              "code": 204,
              "message": "The resource was successfully deleted."
            },
            {
              "code": 400,
              "message": "Bad Request.  The request was invalid and cannot be completed.  See the response body for specific validation errors."
            },
            {
              "code": 401,
              "message": "Unauthorized.  The request requires authentication.  The OAuth bearer token was either not provided or is invalid.  The operation may succeed once authenication has been successfully completed."
            },
            {
              "code": 403,
              "message": "Forbidden.  The request cannot be completed in the current authorization context.  Contact your administrator if you believe this operation should be allowed."
            },
            {
              "code": 404,
              "message": "The resource could not be found."
            },
            {
              "code": 409,
              "message": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
            },
            {
              "code": 412,
              "message": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request.  This indicates the resource has been modified by another consumer."
            },
            {
              "code": 500,
              "message": "An unhandled error occurred on the server. See the response body for details.",
              "responseModel": "webServiceError"
            }
          ]
        }
      ]
    }
  ],
  "models": {
    "studentSpecialEducationProgramAssociation": {
      "id": "studentSpecialEducationProgramAssociation",
      "properties": {
        "id": {
          "type": "string",
          "required": true,
          "description": "The unique identifier of the resource."
        },
        "educationOrganizationReference": {
          "type": "educationOrganizationReference",
          "required": true,
          "description": "A reference to the related EducationOrganization resource."
        },
        "programReference": {
          "type": "programReference",
          "required": true,
          "description": "A reference to the related Program resource."
        },
        "studentReference": {
          "type": "studentReference",
          "required": true,
          "description": "A reference to the related Student resource."
        },
        "beginDate": {
          "type": "string",
          "format": "date",
          "required": true,
          "description": "The month, day, and year on which the Student first received services."
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "required": false,
          "description": "The month, day, and year on which the Student exited the Program or stopped receiving services."
        },
        "ideaEligibility": {
          "type": "boolean",
          "format": "",
          "required": false,
          "description": "Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA)."
        },
        "iepBeginDate": {
          "type": "string",
          "format": "date",
          "required": false,
          "description": "The effective date of the most recent IEP."
        },
        "iepEndDate": {
          "type": "string",
          "format": "date",
          "required": false,
          "description": "The end date of the most recent IEP."
        },
        "iepReviewDate": {
          "type": "string",
          "format": "date",
          "required": false,
          "description": "The date of the last IEP review."
        },
        "lastEvaluationDate": {
          "type": "string",
          "format": "date",
          "required": false,
          "description": "The date of the last special education evaluation."
        },
        "medicallyFragile": {
          "type": "boolean",
          "format": "",
          "required": false,
          "description": "Indicates whether the Student receiving special education and related services is:          1) in the age range of birth to 22 years, and          2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and          3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and          4) lives with ongoing threat to his or her continued well-being.          Aligns with federal requirements."
        },
        "multiplyDisabled": {
          "type": "boolean",
          "format": "",
          "required": false,
          "description": "Indicates whether the Student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements."
        },
        "reasonExitedDescriptor": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The reason the child left the Program within a school or district."
        },
        "schoolHoursPerWeek": {
          "type": "number",
          "format": "double",
          "required": false,
          "description": "Indicate the total number of hours of instructional time per week for the school that the student attends."
        },
        "servedOutsideOfRegularSession": {
          "type": "boolean",
          "format": "",
          "required": false,
          "description": "Indicates whether the Student received services during the summer session or between sessions."
        },
        "specialEducationHoursPerWeek": {
          "type": "number",
          "format": "double",
          "required": false,
          "description": "The number of hours per week for special education instruction and therapy."
        },
        "specialEducationSettingDescriptor": {
          "type": "string",
          "format": "",
          "required": false,
          "description": "The major instructional setting (more than 50 percent of a student's special education program)."
        },
        "serviceProviders": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of studentSpecialEducationProgramAssociationServiceProviders.  The Staff providing special education services to the Student.",
          "items": {
            "$ref": "studentSpecialEducationProgramAssociationServiceProvider"
          }
        },
        "services": {
          "type": "array",
          "required": false,
          "description": "An unordered collection of studentProgramAssociationServices.  Indicates the Service(s) being provided to the Student by the Program.",
          "items": {
            "$ref": "studentProgramAssociationService"
          }
        },
        "_etag": {
          "type": "string",
          "required": false,
          "description": "A unique system-generated value that identifies the version of the resource."
        }
      }
    },
    "educationOrganizationReference": {
      "id": "educationOrganizationReference",
      "properties": {
        "educationOrganizationId": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related educationOrganization resource."
        }
      }
    },
    "programReference": {
      "id": "programReference",
      "properties": {
        "educationOrganizationId": {
          "type": "integer",
          "format": "int32",
          "required": true,
          "description": "The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID."
        },
        "type": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The type of program."
        },
        "name": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related program resource."
        }
      }
    },
    "studentReference": {
      "id": "studentReference",
      "properties": {
        "studentUniqueId": {
          "type": "string",
          "format": "int32",
          "required": true,
          "description": "A unique alphanumeric code assigned to a student."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related student resource."
        }
      }
    },
    "studentSpecialEducationProgramAssociationServiceProvider": {
      "id": "studentSpecialEducationProgramAssociationServiceProvider",
      "properties": {
        "staffReference": {
          "type": "staffReference",
          "required": true,
          "description": "A reference to the related Staff resource."
        },
        "primaryProvider": {
          "type": "boolean",
          "format": "",
          "required": false,
          "description": "Primary ServiceProvider."
        }
      }
    },
    "studentProgramAssociationService": {
      "id": "studentProgramAssociationService",
      "properties": {
        "serviceDescriptor": {
          "type": "string",
          "format": "",
          "required": true,
          "description": "Indicates the Service being provided to the student by the Program."
        },
        "primaryIndicator": {
          "type": "boolean",
          "format": "",
          "required": false,
          "description": "True if service is a primary service."
        },
        "serviceBeginDate": {
          "type": "string",
          "format": "date",
          "required": false,
          "description": "First date the Student was in this option for the current school year."
        },
        "serviceEndDate": {
          "type": "string",
          "format": "date",
          "required": false,
          "description": "Last date the Student was in this option for the current school year."
        }
      }
    },
    "staffReference": {
      "id": "staffReference",
      "properties": {
        "staffUniqueId": {
          "type": "string",
          "format": "int32",
          "required": true,
          "description": "A unique alphanumeric code assigned to a staff."
        },
        "link": {
          "type": "link",
          "required": false,
          "description": "Represents a hyperlink to the related staff resource."
        }
      }
    },
    "webServiceError": {
      "id": "webServiceError",
      "properties": {
        "message": {
          "type": "string",
          "required": false,
          "description": "The \"user-friendly\" error message."
        },
        "exceptionMessage": {
          "type": "string",
          "required": false,
          "description": "The system-generated exception message."
        },
        "exceptionType": {
          "type": "string",
          "required": false,
          "description": "The type of the exception."
        },
        "stackTrace": {
          "type": "string",
          "required": false,
          "description": "The server-side stack trace (only available in DEBUG builds)."
        }
      }
    },
    "link": {
      "id": "link",
      "properties": {
        "rel": {
          "type": "string",
          "required": false,
          "description": "Describes the nature of the relationship to the referenced resource."
        },
        "href": {
          "type": "string",
          "required": false,
          "description": "The URL to the related resource."
        }
      }
    }
  }
}
