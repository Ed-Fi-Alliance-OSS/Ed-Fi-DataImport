@*
SPDX-License-Identifier: Apache-2.0
Licensed to the Ed-Fi Alliance under one or more agreements.
The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
See the LICENSE and NOTICES files in the project root for more information.
*@

@using DataImport.Models
@using DataImport.Web.Features.DataMaps
@using DataImport.Web.Infrastructure
@using Humanizer
@model DataImport.Models.DataMapper
@functions
{
    public static string InferSource(DataMapper mapper)
    {
        if (mapper.SourceTable != null)
            return Sources.LookupTable;

        if (mapper.SourceColumn != null)
            return Sources.Column;

        if (mapper.Value != null)
            return Sources.Static;

        return null;
    }
}
@{
    var dataSources = (List<SelectListItem>)ViewData["DataSources"];
    var sourceColumns = (List<SelectListItem>)ViewData["SourceColumns"];
    var sourceTables = (List<SelectListItem>)ViewData["SourceTables"];
    var resourceMetadata = (ResourceMetadata)ViewData["ResourceMetadata"];
    var depth = (int)ViewData["Depth"];
    var arrayElementName = (string)ViewData["ArrayElementName"];
    var isArrayElement = arrayElementName != null;
    var isLeafNode = !resourceMetadata.Children.Any();
    var required = resourceMetadata.Required ? "class = required" : "";
    var isDescriptor = resourceMetadata.Name.EndsWith("Descriptor", StringComparison.OrdinalIgnoreCase);
    RuntimeAssertion.Assert(resourceMetadata.Name == Model.Name);

    <div class="@(depth == 0 || !isLeafNode ? "property-border " : "")map-node" data-node-depth="@depth" data-node-name="@Model.Name" style="padding-left: 15px;">
        <div class="form-group">
            <div class="col-sm-2">
                <label @required>@(arrayElementName ?? $"{Model.Name.Titleize()}")</label>
            </div>

            @if (isArrayElement)
            {
                <div class="col-sm-10 field-block">
                    <button type="button" class="map-delete-array-element btn btn-default btn-sm pull-right" title="Remove this array element from the mapping.">X</button>
                </div>
            }

            @if (isLeafNode)
            {
                <div class="map-property-selections col-sm-10 field-block" data-node-depth="@depth">
                    @Html.DropDownList("Source", new SelectList(dataSources, "Value", "Text", InferSource(Model)), new
                    {
                        id = (string)null,
                        title = "Select Data Source",
                        @class = "form-control map-source-type"
                    })

                    @{
                        var sourceColumnItems = new List<SelectListItem>(sourceColumns);
                        if (!string.IsNullOrWhiteSpace(Model.SourceColumn) && sourceColumns.All(x => x.Value != Model.SourceColumn))
                        {
                            sourceColumnItems.Add(new SelectListItem
                            {
                                Value = Model.SourceColumn,
                                Text = Model.SourceColumn,
                                Selected = true
                            });
                        }
                    }

                    @Html.DropDownListFor(x => x.SourceColumn, new SelectList(sourceColumnItems, "Value", "Text", Model.SourceColumn), new
                    {
                        id = (string)null,
                        title = "Select Source Column",
                        @class = "form-control map-source-column"
                    })

                    @{
                        var sourceTableItems = new List<SelectListItem>(sourceTables);
                        if (!string.IsNullOrWhiteSpace(Model.SourceTable) && sourceTables.All(x => x.Value != Model.SourceTable))
                        {
                            sourceTableItems.Add(new SelectListItem
                            {
                                Value = Model.SourceTable,
                                Text = Model.SourceTable,
                                Selected = true
                            });
                        }
                    }

                    @Html.DropDownListFor(x => x.SourceTable, new SelectList(sourceTableItems, "Value", "Text", Model.SourceTable), new
                    {
                        id = (string)null,
                        title = "Select Source Table",
                        @class = "form-control map-source-table"
                    })

                    @Html.TextBoxFor(x => x.Value, new
                    {
                        id = (string)null,
                        title = "Static Value",
                        @class = "form-control map-static-value",
                        placeholder = "Static Value"
                    })

                    @Html.TextBoxFor(x => x.Default, new
                    {
                        id = (string)null,
                        title = "Default Value",
                        @class = "form-control map-default-value",
                        placeholder = "Default Value"
                    })

                    @if (isDescriptor)
                    {
                        @Html.DescriptorLookupButton(Model.Name)
                    }
                </div>
            }
        </div>
        @if (resourceMetadata.DataType == "array")
        {
            //Each child mapping is for an array element, all of which share a single item-describing metadata object.
            var arrayItemMetadata = resourceMetadata.Children.Single();
            var itemNickname = Model.Name.Singularize(inputIsKnownToBePlural: false).Titleize();
            for (int i = 0; i < Model.Children.Count; i++)
            {
                @Html.EditorFor(x => x.Children[i], additionalViewData: new
                {
                    Depth = depth + 1,
                    ResourceMetadata = arrayItemMetadata,
                    ArrayElementName = $"{itemNickname} Item"
                })
            }

            //Render a nonfunctional hidden template for the hypothetical next item, including nested elements
            //and *their* nonfunctional hidden templates, all the way down through the metadata tree.
            //In other words, the hidden templates depict a mapping in which all arrays have a single placeholder
            //element. This allows adding array items at any level, via cloning the template markup, without having
            //to make round trips to the server.
            var templateMapping = arrayItemMetadata.BuildInitialMappings();
            <button type="button" class="map-add-array-element btn btn-default btn-sm">Add @itemNickname Item</button>
            <div class="hidden map-array-element-template">
                @Html.EditorFor(x => templateMapping, additionalViewData: new
                {
                    Depth = depth + 1,
                    ResourceMetadata = arrayItemMetadata,
                    ArrayElementName = $"{itemNickname} Item"
                })
            </div>
        }
        else
        {
            for (int i = 0; i < Model.Children.Count; i++)
            {
                var childMapping = Model.Children[i];
                //Each child is an object property, each of which has its own property-describing metadata object.
                @Html.EditorFor(x => x.Children[i], additionalViewData: new
                {
                    Depth = depth + 1,
                    ResourceMetadata = resourceMetadata.Children.Single(m => m.Name == childMapping.Name),
                    ArrayElementName = (string)null
                })
            }
        }
    </div>
}